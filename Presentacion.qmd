---
format:
  revealjs: 
    slide-number: true
    chalkboard: 
      buttons: true
    preview-links: auto
    logo: "https://ig.conae.unc.edu.ar/wp-content/uploads/sites/68/2022/04/G-UNC-CONAE-C.png"
    theme: 'reveal.scss'

output-file: index.html
---

# {background-color="#1A428A" background-image="https://ig.conae.unc.edu.ar/wp-content/uploads/sites/68/2022/04/G-UNC-CONAE-C.png"  background-size="60% auto" style="z-index: 4;"}


::: footer

:::


# Git y GitHub {background-color="#1A428A" background-image="img/presentation_title.png" background-size="auto 100%" background-position="right" style="height: 100%;  display: flex; align-items: center; justify-content: left; z-index: 4;" } 

<!-- ... y un poquito de Quarto -->


:::: {style="height: 100%; display: flex; align-items: center; justify-content: left;"} 

::: {style="font-size: 1.5em; justify-content: 'center';"}
Pablo Paccioretti

Verónica Andreo
:::
::::
 

::: footer
 
:::

## Presteps

- Tener git instalado en la PC [Windows](https://gitforwindows.org/)
- Crear cuenta en [GitHub](https://github.com/)
- Instalar Quarto ([https://quarto.org/docs/download/](https://quarto.org/docs/download/))

::: {.callout-note appearance="simple"}

Por defecto Git está instalado en la mayoría de las PCs que tienen Mac o Linux. En Windows se puede instalar desde [aqui](https://gitforwindows.org/)

Quarto puede usarse con: VS Code, RStudio, Jupyter, Neovim, otros editores de texto
:::

## Outline

:::: {.columns}

::: {.column width="50%"}
- Que es Git 
- Git Workflow local
  * Crear un repositorio (*repo*)
  * Agregar archivos, _commit_ 
:::

::: {.column width="50%"}
- Que es GitHub/ GitLab/BitBucket/...
- GitHub Workflow
  * Crear repo en GitHub
  * Push
  * Pull request
:::

::::

## Qué es Git?

- Es un programa de control de versiones por línea de comandos que permite:
  - Administrar archivos, carpetas
  - Realizar un seguimiento de los cambios a lo largo del tiempo
  - Volver a versiones anteriores

## ¿Qué es un repositorio?

- repo = repositorio = _repository_
- Por lo general es utilizado para organizar un *único* proyecto
- Los repos pueden contener carpetas, archivos, imágenes, videos...


## Git Workflow local

:::: {.columns}

::: {.column width="75%"}

(@) Iniciar un nuevo proyecto en una carpeta

```{{bash}}
git init
```

(@) Agregar/Editar archivos
(@) Registrar cada cambio

```{{bash}}
git add .
```
(@) Confirmar cambio en el repositorio

```{{bash}}
git commit -m "Un mensaje descriptivo y corto"
```
:::

::: {.column width="25%"}

```{mermaid}
%%| fig-height: 5


graph TD
  A[Working] -->|add| B(Staging index)
  B --> |commit| C(Repository)
```

:::

::::


## Tips sobre Git

::: {.callout-tip appearance="simple"}
Para utilizarlo no es necesario internet. Es posible trabajar manera local y luego cargar/combinar los cambios.
:::

::: {.callout-important}
## Cuando se debería usar Git? 

Principalmente para trabajar/editar archivos de texto.
No se recomienda para imágenes, películas, música o archivos como pdf, docx, etc.
:::

::: {.callout-tip}
## Como deberían ser los mensajes de cada commit

Mediante una oración corta e informativa ($\le 72$ caracteres), se debería describir y resumir los cambios que se realizaron.
:::


## Revisando los cambios

- Cómo ver que se estuvo modificando? 

```{{bash}}
git log
```
- Cómo ver que archivos se están modificando? 

```{{bash}}
git status
```

- Cómo ver qué cambió de cada archivo? 

```{{bash}}
git diff
git diff nombreArchivo.txt
```

## Otros comandos que podrían resultar útiles

Eliminar archivos del repo

```{{bash}}
git rm nombreArchivo.py
```

Renombrar/Mover archivos

```{{bash}}
git mv nombreArchivo.py OtroNombre.py
```

## Los comandos más usados

```{{bash}}
git init
git status
git log
git add
git commit -m "blabla"
git diff
git rm
git mv
```

## Ramas/Branch

- Permiten probar nuevos cambios
- Si un cambio no funcionó, se puede eliminar la rama sin necesidad de deshacer cambios en la rama principal
- Si un cambio funcionó, se puede combinar (merge) a la rama principal
- Siempre se utiliza el mismo directorio de trabajo

--- 

:::: {.columns}

::: {.column width="50%"}

- En que Rama _branch_ estoy?
```{{bash}}
git branch
```
- Cómo creo una rama?
```{{bash}}
git branch nueva_rama
```

- Cómo cambio entre ramas?
```{{bash}}
git checkout nueva_rama
```
:::

::: {.column width="50%"}

- Cómo creo y cambio a la nueva rama?
```{{bash}}
git checkout -b nueva_rama
```

- Como veo las diferencias entre ramas?
```{{bash}}
git diff una_rama..otra_rama
```
:::

::::


---

::: {.callout-tip}
## Algunos tips

- Se puede cambiar entre ramas y realizar commits. 

- Cada rama está separada y es independiente de las otras ramas. 

- Antes de cambiar entre ramas, el directorio de trabajo debería estar sin conflictos ni cambios no confirmados (_commiteados_).
:::



## Cómo se combinan ramas? 

Desde la rama desde la cual se quiere unir la otra rama

```{{bash}}
git merge la_otra_rama
```

## Conflictos cuando se combinan

- Se dan cuando dos commits tienen cambios en la misma línea de código.
- Git identificará los conflictos pero no los solucionará

Alternativas:

- Abortar el merge `git merge --abort`
- Arreglar manualmente los conflictos

---

::: {.callout-tip}
## Como evitar algunos conflictos

- Combinar los trabajos en la rama de manera frecuente
- Mantener cada commit simple y enfocado a determinados cambios/soluciones
- Combinar lo que sucede en la rama en master de manera frecuente. 
:::




```{{bash}}
git log  --graph --oneline --all --decorate
```


## Volviendo en el tiempo

Podemos ver los cambios que se estuvieron realizando y volver a versiones anteriores que ya fueron confirmadas (_commiteadas_)

```{{bash}}
git checkout archivo
git checkout branch
git checkout commitID
```


::::{.columns}

:::{.column}


Deshacer cambios hechos *antes* de hacer el commit. 

```{{bash}}
git reset HEAD nombreArchivo.r
```
:::{style="color: grey; text-align: center; font-size: 0.8em;"}
Staging area
:::

:::

:::{.column}
Deshacer cambios hechos *luego* de hacer el commit. 
```{{bash}}
git commit --ammend -m "bla bla"
```
:::{style="color: grey; text-align: center; font-size: 0.8em;"}
Repository
:::

:::

::::

## Qué es GitHub? 

GitHub ayuda a colaborar entre usuarios usando git. 

Es una plataforma que contiene repositorios almacenados en la nube, diferentes desarrolladores pueden trabajar en un único proyecto y ver los cambios realizados. 

----

::::{.columns}

:::{.column}
##### Git
- Git es un software para control de versiones. Permite a los desarrolladores registrar los cambios de los proyectos.
:::

:::{.column}
##### GitHub
- GitHub es una plataforma web que incorpora características de git para que puedan ser usadas de manera colaborativa.
:::

::::


## Principales acciones en GitHub

Fork
: El proceso de copiar el repositorio de otro desarrollador para poder modificarlo. 

Pull
: Una vez que se realizan los cambios, se pueden sugerir mendiante _pull request_

Merge
: El dueño del repositorio puede combinar los cambios 


# Aplicación en GitHub {background-color="#1A428A"}

---

![](img/Creacion_Repo_GitHub.png){.r-stretch fig-align="center"}

---

![](img/Importar_Repo_GitHub.png){.r-stretch fig-align="center"}

---

![](img/Importado_Repo_GitHub.png){.r-stretch fig-align="center"}

---

![](img/fork_1.png){.r-stretch fig-align="center"}

---

![](img/fork_created.png){.r-stretch fig-align="center"}

---

![](img/clone_fork_https.png){.r-stretch fig-align="center"}

---

![](img/git_clone_repo_terminal.png){.r-stretch fig-align="center"}

---

![](img/create_fork.png){.r-stretch fig-align="center"}

---

![](img/add_upstream.png){.r-stretch fig-align="center"}

---

![](img/merge_pull_request.png){.r-stretch fig-align="center"}

---

![](img/merged_pr.png){.r-stretch fig-align="center"}

---

## Codigos ejecutados


```{{bash}}
py -m pip install jupyter #sudo

git init .
curl -o .gitignore --fail --show-error --silent --location https://raw.github.com/github/gitignore/master/R.gitignore
# curl -o .gitignore --fail --show-error --silent --location https://raw.github.com/github/gitignore/master/Python.gitignore
```

## Imoportar Proyecto Propio


Creando un repositorio local nuevo

```{{bash}}
echo "# Taller_IG_Git_GitHub" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/PPaccioretti/Taller_IG_Git_GitHub.git
git push -u origin main
```

## Imoportar Proyecto Propio

Agregando el repositorio remoto en un repositorio local

```{{bash}}
git remote add origin https://github.com/PPaccioretti/Taller_IG_Git_GitHub.git
git branch -M main
git push -u origin main
```

## Trabajo colaborativo 

- Clonar proyecto forkeado

```{{bash}}
git clone https://github.com/veroandreo/Taller_IG_Git_GitHub.git
cd Taller_IG_Git_GitHub
```

- Agregar un repositorio remoto al proyecto

```{{bash}}
git remote add upstream https://github.com/PPaccioretti/Taller_IG_Git_GitHub.git
git remote -v
```

```
origin  https://github.com/veroandreo/Taller_IG_Git_GitHub.git (fetch)
origin  https://github.com/veroandreo/Taller_IG_Git_GitHub.git (push)
upstream  https://github.com/PPaccioretti/Taller_IG_Git_GitHub.git (fetch)
upstream  https://github.com/PPaccioretti/Taller_IG_Git_GitHub.git (push)
```

## Descargando cambios

```{.bash}
$ git pull
```

```{.bash}
remote: Enumerating objects: 11, done.
remote: Counting objects: 100% (11/11), done.
remote: Compressing objects: 100% (5/5), done.
remote: Total 5 (delta 3), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (5/5), 1.41 KiB | 62.00 KiB/s, done.
From https://github.com/PPaccioretti/Taller_IG_Git_GitHub
   29e253f..23b8f56  main       -> origin/main
Updating 29e253f..23b8f56
Fast-forward
 .github/workflows/publish.yml | 25 +++++++++++++++++++++++++
 Presentacion.qmd              | 41 -----------------------------------------
 _quarto.yml                   |  4 ++++
 3 files changed, 29 insertions(+), 41 deletions(-)
 create mode 100644 .github/workflows/publish.yml
```

## Descargando cambios - error

```{.bash}
$ git pull
```

```{.bash code-line-numbers="8-12"}
remote: Enumerating objects: 10, done.
remote: Counting objects: 100% (10/10), done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 6 (delta 3), reused 5 (delta 3), pack-reused 0
Unpacking objects: 100% (6/6), 1.18 KiB | 37.00 KiB/s, done.
From https://github.com/PPaccioretti/Taller_IG_Git_GitHub
   93c8128..845dc10  main       -> origin/main
error: Your local changes to the following files would be overwritten by merge:
        .gitignore
        Presentacion.qmd
Please commit your changes or stash them before you merge.
Aborting
Updating 93c8128..845dc10
```


<!-- ## Material de consulta

https://kinsta.com/knowledgebase/git-vs-github/

https://www.slideshare.net/bcbbslides/introduction-to-git-and-github-72514916 -->
